{"version":3,"sources":["src/apis/api.tsx","src/components/Poster.tsx","src/components/utils/index.ts","src/components/Votes.tsx","src/components/Movies/Slide.tsx","src/components/Vertical.tsx","src/components/Horizontal.tsx","src/components/ScrollContainer.tsx","src/components/Title.tsx","src/components/HorizontalSlider.tsx","src/components/List.tsx","src/screens/Movies/MoviesPresenter.tsx","src/screens/Movies/MoviesContainer.tsx","src/components/Detail/Link.tsx","src/screens/Detail/DetailPresenter.tsx","src/screens/Detail/DetailContainer.tsx","src/screens/Favs/FavPresenter.tsx","src/screens/Favs/FavsContainer.tsx","src/components/Search/Input.tsx","src/screens/Search/SearchPresenter.tsx","src/screens/Search/SearchContainer.tsx","src/screens/Tv/TvPresenter.tsx","src/screens/Tv/TvContainer.tsx","src/navigation/Tabs.tsx","src/navigation/Stack.tsx","App.tsx","assets/splash.png"],"names":["TMDB_KEY","makeRequest","path","params","axios","get","api_key","getAnything","a","async","results","data","movieApi","region","query","id","append_to_response","tvApi","apiImage","defaultPoster","Image","styled","url","source","uri","trimText","text","limit","length","slice","formatDate","date","Date","toLocaleDateString","day","month","year","Container","Text","votes","View","BG","Content","Data","Title","VotesContainer","Overview","Button","ButtonText","title","backgroundImage","overview","poster","navigation","useNavigation","Poster","Votes","TouchableOpacity","onPress","navigate","isTv","ReleaseDate","releaseDate","refreshFn","loading","children","contentContainerStyle","useState","refreshing","setRefreshing","ScrollView","refreshControl","RefreshControl","onRefresh","tintColor","style","backgroundColor","flex","justifyContent","ActivityIndicator","color","marginTop","marginBottom","paddingLeft","horizontal","showsHorizontalScrollIndicator","Dimensions","HEIGHT","width","height","SliderContainer","nowPlaying","popular","upcoming","ScrollContainer","paddingTop","controlsEnabled","loop","timeout","map","movie","Slide","key","original_title","vote_average","backdrop_path","poster_path","HorizontalSlider","Vertical","List","Horizontal","release_date","Home","nowPlayingError","popularError","upcomingError","movies","setMovies","getData","useEffect","MoviesPresenter","icon","FontAwesome","name","size","Header","Info","DataName","DataValue","openBrowser","result","paddingBottom","spoken_languages","l","status","revenue","runtime","first_air_date","genres","g","index","number_of_episodes","number_of_seasons","imdb_id","Link","videos","video","route","detail","setDetail","getDetail","useLayoutEffect","setOptions","DetailPresenter","WebBrowser","WIDTH","Card","Animated","topIndex","setTopIndex","nextCard","currentValue","position","useRef","ValueXY","current","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","evt","dx","dy","setValue","x","y","onPanResponderRelease","spring","toValue","useNativeDriver","start","bounciness","rotationValues","interpolate","inputRange","outputRange","extrapolate","secondCardOpacity","secondCardScale","zIndex","transform","rotate","getTranslateTransform","panHandlers","opacity","scale","FavsContainer","error","FavPresenter","TextInput","placeholder","value","onChange","onSubmit","onChangeText","onSubmitEditing","returnKeyType","shows","keyword","Input","show","setKeyword","movieError","showsError","setResults","SearchPresenter","topRated","today","thisWeek","todayError","thisWeekError","topRatedError","setShows","TvPresenter","Tabs","createBottomTabNavigator","getFocusedRouteNameFromRoute","getHeaderName","Navigator","screenOptions","headerShown","tabBarStyle","borderTopColor","tabBarShowLabel","tabBarIcon","focused","iconName","Platform","OS","Ionicons","Screen","component","Movies","Tv","Search","Favs","Stack","createStackNavigator","presentation","headerStyle","borderBottomColor","shadowColor","headerTintColor","headerBackTitleVisible","Detail","App","isReady","setIsReady","NavigationContainer","StatusBar","barStyle","startAsync","images","image","prefetch","Asset","fromModule","downloadAsync","cacheImages","require","fonts","font","Font","cacheFonts","Promise","all","onFinish","onError","console","module","exports"],"mappings":"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","file":"static/js/app.df3df52c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst TMDB_KEY = '1c4686fb63dc7e0e6d4c59ec8c5233dd';\r\n\r\nconst makeRequest = (path: string, params = {}) => {\r\n  return axios.get(`https://api.themoviedb.org/3${path}`, {\r\n    params: {\r\n      ...params,\r\n      api_key: TMDB_KEY\r\n    }\r\n  });\r\n};\r\n\r\nconst getAnything = async (path: string, params = {}) => {\r\n  try {\r\n    const {\r\n      data: { results },\r\n      data\r\n    } = await makeRequest(path, params);\r\n    return [results || data, null];\r\n  } catch (error) {\r\n    return [null, error];\r\n  }\r\n};\r\n\r\nexport const movieApi = {\r\n  nowPlaying: () => getAnything('/movie/now_playing'),\r\n  popular: () => getAnything('/movie/popular'),\r\n  upcoming: () => getAnything('/movie/upcoming', { region: 'kr' }),\r\n  search: (query: string) => getAnything('/search/movie', { query }),\r\n  movie: (id: number) => getAnything(`/movie/${id}`, { append_to_response: 'videos' }),\r\n  discover: () => getAnything('/discover/movie')\r\n};\r\n\r\nexport const tvApi = {\r\n  today: () => getAnything('/tv/airing_today'),\r\n  thisWeek: () => getAnything('/tv/on_the_air'),\r\n  topRated: () => getAnything('/tv/top_rated'),\r\n  popular: () => getAnything('/tv/popular'),\r\n  search: (query: string) => getAnything('/search/tv', { query }),\r\n  show: (id: number) => getAnything(`/tv/${id}`, { append_to_response: 'videos' })\r\n};\r\n\r\nexport const apiImage = (\r\n  path: string,\r\n  defaultPoster = 'https://images.unsplash.com/photo-1571847140471-1d7766e825ea?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=673&q=80'\r\n) => {\r\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultPoster;\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../apis/api';\r\n\r\ntype PosterProps = {\r\n  url: string;\r\n};\r\n\r\nconst Image = styled.Image`\r\n  width: 100px;\r\n  height: 160px;\r\n  border-radius: 4px;\r\n`;\r\n\r\nexport default ({ url }: PosterProps) => {\r\n  return <Image source={{ uri: apiImage(url) }} />;\r\n};\r\n","export const trimText = (text = '', limit: number) => {\r\n  return text.length > limit ? `${text.slice(0, limit)}...` : text;\r\n};\r\n\r\nexport const formatDate = (date: string | number | Date) => {\r\n  const theDate = new Date(date);\r\n  return theDate.toLocaleDateString('ko', {\r\n    day: 'numeric',\r\n    month: 'long',\r\n    year: 'numeric'\r\n  });\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\n\r\ntype VotesProps = {\r\n  votes: number;\r\n};\r\n\r\nconst Container = styled.Text`\r\n  color: rgb(220, 220, 220);\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport default ({ votes }: VotesProps) => {\r\n  return <Container>👩 {votes} / 10</Container>;\r\n};\r\n","import { useNavigation } from '@react-navigation/native';\r\nimport React from 'react';\r\nimport { TouchableOpacity } from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../../apis/api';\r\nimport Poster from '../Poster';\r\nimport { trimText } from '../utils';\r\nimport Votes from '../Votes';\r\n\r\ntype SlideProps = {\r\n  id: number;\r\n  title: string;\r\n  backgroundImage: string;\r\n  votes: number;\r\n  overview: string;\r\n  poster: string;\r\n};\r\n\r\nconst Container = styled.View`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst BG = styled.Image`\r\n  height: 100%;\r\n  width: 100%;\r\n  opacity: 0.4;\r\n  position: absolute;\r\n`;\r\n\r\nconst Content = styled.View`\r\n  height: 100%;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst Data = styled.View`\r\n  width: 50%;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst Title = styled.Text`\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 19px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst VotesContainer = styled.View`\r\n  margin-bottom: 7px;\r\n`;\r\n\r\nconst Overview = styled.Text`\r\n  color: rgb(220, 220, 220);\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Button = styled.View`\r\n  margin-top: 10px;\r\n  background-color: #e74c3c;\r\n  padding: 7px 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ButtonText = styled.Text`\r\n  color: white;\r\n`;\r\n\r\nexport default ({ id, title, backgroundImage, votes, overview, poster }: SlideProps) => {\r\n  const navigation = useNavigation();\r\n  const goToDetail = () => {\r\n    navigation.navigate('Detail', {\r\n      id,\r\n      title,\r\n      backgroundImage,\r\n      votes,\r\n      overview,\r\n      poster\r\n    });\r\n  };\r\n  return (\r\n    <Container>\r\n      <BG source={{ uri: apiImage(backgroundImage) }} />\r\n      <Content>\r\n        <Poster url={poster} />\r\n        <Data>\r\n          <Title>{trimText(title, 40)}</Title>\r\n          <VotesContainer>\r\n            <Votes votes={votes} />\r\n          </VotesContainer>\r\n          <Overview>{trimText(overview, 110)}</Overview>\r\n          <TouchableOpacity onPress={goToDetail}>\r\n            <Button>\r\n              <ButtonText>View details</ButtonText>\r\n            </Button>\r\n          </TouchableOpacity>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n","import { useNavigation } from '@react-navigation/native';\r\nimport React from 'react';\r\nimport { TouchableOpacity } from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../apis/api';\r\nimport Poster from './Poster';\r\nimport { trimText } from './utils';\r\nimport Votes from './Votes';\r\n\r\ntype VerticalProps = {\r\n  id: number;\r\n  poster: string;\r\n  title: string;\r\n  votes: number;\r\n  isTv: boolean;\r\n};\r\n\r\nconst Container = styled.View`\r\n  align-items: center;\r\n  margin-right: 20px;\r\n`;\r\n\r\nconst Title = styled.Text`\r\n  color: white;\r\n  font-weight: 500;\r\n  margin: 10px 0px 5px 0px;\r\n`;\r\n\r\nexport default ({ isTv = false, id, poster, title, votes }: VerticalProps) => {\r\n  const navigation = useNavigation();\r\n  const goToDetail = () => {\r\n    navigation.navigate('Detail', {\r\n      isTv,\r\n      id,\r\n      title,\r\n      votes,\r\n      poster\r\n    });\r\n  };\r\n  return (\r\n    <TouchableOpacity onPress={goToDetail}>\r\n      <Container>\r\n        <Poster url={poster} />\r\n        <Title>{trimText(title, 10)}</Title>\r\n        {votes > 0 && <Votes votes={votes} />}\r\n      </Container>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n","import { useNavigation } from '@react-navigation/native';\r\nimport React from 'react';\r\nimport { TouchableOpacity } from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../apis/api';\r\nimport Poster from './Poster';\r\nimport { formatDate, trimText } from './utils';\r\nimport Votes from './Votes';\r\n\r\ntype HorizontalProps = {\r\n  id: number;\r\n  title: string;\r\n  poster: string;\r\n  overview: string;\r\n  releaseDate?: string;\r\n  isTv: boolean;\r\n};\r\n\r\nconst Container = styled.View`\r\n  padding: 0px 30px;\r\n  margin-bottom: 30px;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n`;\r\nconst Data = styled.View`\r\n  align-items: flex-start;\r\n  width: 60%;\r\n  margin-left: 25px;\r\n`;\r\nconst Title = styled.Text`\r\n  color: white;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\nconst ReleaseDate = styled.Text`\r\n  color: white;\r\n  font-size: 12px;\r\n`;\r\nconst Overview = styled.Text`\r\n  color: white;\r\n  margin-top: 10px;\r\n`;\r\nexport default ({\r\n  isTv = false,\r\n  id,\r\n  title,\r\n  poster,\r\n  overview,\r\n  releaseDate\r\n}: HorizontalProps) => {\r\n  const navigation = useNavigation();\r\n  const goToDetail = () => {\r\n    navigation.navigate('Detail', {\r\n      isTv,\r\n      id,\r\n      title,\r\n      poster,\r\n      overview,\r\n      releaseDate\r\n    });\r\n  };\r\n  return (\r\n    <TouchableOpacity onPress={goToDetail}>\r\n      <Container>\r\n        <Poster url={poster} />\r\n        <Data>\r\n          <Title>{trimText(title, 30)}</Title>\r\n          {releaseDate ? <ReleaseDate>{formatDate(releaseDate)}</ReleaseDate> : null}\r\n          <Overview>{trimText(overview, 130)}</Overview>\r\n        </Data>\r\n      </Container>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport { useState } from 'react';\r\nimport { View, Text, ScrollView, ActivityIndicator, RefreshControl } from 'react-native';\r\n\r\ntype ScrollContainerProps = {\r\n  loading: boolean;\r\n  children: ReactNode;\r\n  contentContainerStyle: object;\r\n  refreshFn: () => void;\r\n};\r\n\r\nexport default ({\r\n  refreshFn,\r\n  loading,\r\n  children,\r\n  contentContainerStyle\r\n}: ScrollContainerProps) => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const onRefresh = async () => {\r\n    setRefreshing(true);\r\n    await refreshFn();\r\n    setRefreshing(false);\r\n  };\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl\r\n          onRefresh={onRefresh}\r\n          refreshing={refreshing}\r\n          tintColor={'white'}\r\n        />\r\n      }\r\n      style={{ backgroundColor: 'black' }}\r\n      contentContainerStyle={{\r\n        flex: loading ? 1 : 0,\r\n        justifyContent: loading ? 'center' : 'flex-start',\r\n        ...contentContainerStyle\r\n      }}\r\n    >\r\n      {loading ? <ActivityIndicator color=\"white\" /> : children}\r\n    </ScrollView>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\n\r\ntype TitleProps = {\r\n  title: string;\r\n};\r\n\r\nconst Container = styled.View``;\r\nconst Text = styled.Text`\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-left: 30px;\r\n`;\r\n\r\nexport default ({ title }: TitleProps) => {\r\n  return (\r\n    <Container>\r\n      <Text>{title}</Text>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport { View, Text, ScrollView } from 'react-native';\r\nimport Title from './Title';\r\nimport Vertical from './Vertical';\r\n\r\ntype HorizontalSliderProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n};\r\n\r\nexport default ({ title, children }: HorizontalSliderProps) => {\r\n  return (\r\n    <View>\r\n      <Title title={title} />\r\n      <ScrollView\r\n        style={{ marginTop: 20, marginBottom: 40 }}\r\n        contentContainerStyle={{ paddingLeft: 30 }}\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n      >\r\n        {children}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\nimport Title from './Title';\r\n\r\nconst Container = styled.View`\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <Title title={title} />\r\n      <Container>{children}</Container>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\nimport Swiper from 'react-native-web-swiper';\r\nimport { Dimensions } from 'react-native';\r\nimport Slide from '../../components/Movies/Slide';\r\nimport Vertical from '../../components/Vertical';\r\nimport Horizontal from '../../components/Horizontal';\r\nimport ScrollContainer from '../../components/ScrollContainer';\r\nimport HorizontalSlider from '../../components/HorizontalSlider';\r\nimport List from '../../components/List';\r\n\r\ntype movieProps = {\r\n  id: number;\r\n  original_title: string;\r\n  overview: string;\r\n  vote_average: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  title: string;\r\n  release_date: string;\r\n};\r\n\r\ntype MoviesPresenterProps = {\r\n  loading: boolean;\r\n  nowPlaying: movieProps[];\r\n  popular: movieProps[];\r\n  upcoming: movieProps[];\r\n  refreshFn: () => void;\r\n};\r\n\r\nconst { width: WIDTH, height: HEIGHT } = Dimensions.get('window');\r\n\r\nconst SliderContainer = styled.View`\r\n  width: 100%;\r\n  height: ${HEIGHT / 4}px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nconst Container = styled.View``;\r\n\r\nexport default ({\r\n  refreshFn,\r\n  loading,\r\n  nowPlaying,\r\n  popular,\r\n  upcoming\r\n}: MoviesPresenterProps) => {\r\n  return (\r\n    <ScrollContainer\r\n      refreshFn={refreshFn}\r\n      loading={loading}\r\n      contentContainerStyle={{ paddingTop: 10 }}\r\n    >\r\n      <>\r\n        <SliderContainer>\r\n          <Swiper controlsEnabled={false} loop timeout={3}>\r\n            {nowPlaying.map((movie) => {\r\n              return (\r\n                <Slide\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  title={movie.original_title}\r\n                  overview={movie.overview}\r\n                  votes={movie.vote_average}\r\n                  backgroundImage={movie.backdrop_path}\r\n                  poster={movie.poster_path}\r\n                />\r\n              );\r\n            })}\r\n          </Swiper>\r\n        </SliderContainer>\r\n        <Container>\r\n          <HorizontalSlider title={'Popular Movies'}>\r\n            {popular.map((movie) => {\r\n              return (\r\n                <Vertical\r\n                  id={movie.id}\r\n                  key={movie.id}\r\n                  poster={movie.poster_path}\r\n                  title={movie.title}\r\n                  votes={movie.vote_average}\r\n                />\r\n              );\r\n            })}\r\n          </HorizontalSlider>\r\n          <List title=\"Coming Soon\">\r\n            {upcoming.map((movie) => {\r\n              return (\r\n                <Horizontal\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  title={movie.title}\r\n                  releaseDate={movie.release_date}\r\n                  poster={movie.poster_path}\r\n                  overview={movie.overview}\r\n                />\r\n              );\r\n            })}\r\n          </List>\r\n        </Container>\r\n      </>\r\n    </ScrollContainer>\r\n  );\r\n};\r\n","import { StackNavigationProp } from '@react-navigation/stack';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { View, Text, Button } from 'react-native';\r\nimport { movieApi } from '../../apis/api';\r\nimport { StackNavigatorParams } from '../../navigation/Stack';\r\nimport MoviesPresenter from './MoviesPresenter';\r\n\r\n// type MoviesProps = {\r\n//   navigation: StackNavigationProp<StackNavigatorParams, 'Movies'>;\r\n// };\r\n\r\nconst Home = () => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [movies, setMovies] = useState({\r\n    loading: true,\r\n    nowPlaying: [],\r\n    nowPlayingError: null,\r\n    popular: [],\r\n    popularError: null,\r\n    upcoming: [],\r\n    upcomingError: null\r\n  });\r\n  const getData = async () => {\r\n    const [nowPlaying, nowPlayingError] = await movieApi.nowPlaying();\r\n    const [popular, popularError] = await movieApi.popular();\r\n    const [upcoming, upcomingError] = await movieApi.upcoming();\r\n    setMovies({\r\n      loading: false,\r\n      nowPlaying,\r\n      nowPlayingError,\r\n      popular,\r\n      popularError,\r\n      upcoming,\r\n      upcomingError\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return <MoviesPresenter refreshFn={getData} {...movies} />;\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { TouchableOpacity } from 'react-native';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport styled from 'styled-components/native';\r\n\r\nconst Container = styled.View`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n`;\r\nconst Text = styled.Text`\r\n  font-weight: 600;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport default ({ onPress, text, icon }) => {\r\n  return (\r\n    <TouchableOpacity onPress={onPress}>\r\n      <Container>\r\n        <Text style={{ color: 'white' }}>{text}</Text>\r\n        <FontAwesome name={icon} color=\"white\" size={22} />\r\n      </Container>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  Dimensions,\r\n  ActivityIndicator,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../../apis/api';\r\nimport Link from '../../components/Detail/Link';\r\nimport Poster from '../../components/Poster';\r\nimport ScrollContainer from '../../components/ScrollContainer';\r\nimport { formatDate } from '../../components/utils';\r\nimport Votes from '../../components/Votes';\r\n\r\nconst BG = styled.Image`\r\n  width: 100%;\r\n  height: 100%;\r\n  opacity: 0.4;\r\n  position: absolute;\r\n`;\r\nconst Header = styled.View`\r\n  height: ${Dimensions.get('window').height / 3}px;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst Container = styled.View`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  top: 30px;\r\n`;\r\n\r\nconst Info = styled.View`\r\n  width: 50%;\r\n  margin-left: 40px;\r\n`;\r\n\r\nconst Title = styled.Text`\r\n  color: white;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n`;\r\nconst Data = styled.View`\r\n  margin-top: 30px;\r\n  padding: 0px 30px;\r\n`;\r\nconst DataName = styled.Text`\r\n  color: white;\r\n  margin-top: 30px;\r\n  opacity: 0.8;\r\n  font-weight: 800;\r\n  margin-bottom: 15px;\r\n`;\r\nconst DataValue = styled.Text`\r\n  color: white;\r\n  opacity: 0.8;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport default ({ openBrowser, result, loading }) => {\r\n  return (\r\n    <ScrollContainer loading={false} contentContainerStyle={{ paddingBottom: 80 }}>\r\n      <>\r\n        <Header>\r\n          <BG source={{ uri: apiImage(result.backgroundImage, 'a') }} />\r\n          <Container>\r\n            <Poster url={result.poster} />\r\n            <Info>\r\n              <Title>{result.title}</Title>\r\n              {result.votes ? <Votes votes={result.votes} /> : null}\r\n            </Info>\r\n          </Container>\r\n        </Header>\r\n        <Data>\r\n          {result.overview ? (\r\n            <>\r\n              <DataName>Overview</DataName>\r\n              <DataValue>{result.overview}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {loading ? (\r\n            <ActivityIndicator style={{ marginTop: 30 }} color={'white'} />\r\n          ) : null}\r\n          {result.spoken_languages ? (\r\n            <>\r\n              <DataName>Languages</DataName>\r\n              <DataValue>{result.spoken_languages.map((l) => `${l.name} `)}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.release_date ? (\r\n            <>\r\n              <DataName>Release Date</DataName>\r\n              <DataValue>{formatDate(result.release_date)}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.overview ? (\r\n            <>\r\n              <DataName>Status</DataName>\r\n              <DataValue>{result.status}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.revenue ? (\r\n            <>\r\n              <DataName>Revenue</DataName>\r\n              <DataValue>{result.revenue}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.runtime ? (\r\n            <>\r\n              <DataName>Runtime</DataName>\r\n              <DataValue>{result.runtime} minutes</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.first_air_date ? (\r\n            <>\r\n              <DataName>First Air Date</DataName>\r\n              <DataValue>{formatDate(result.first_air_date)}</DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.genres ? (\r\n            <>\r\n              <DataName>Genres</DataName>\r\n              <DataValue>\r\n                {result.genres.map((g, index) =>\r\n                  index + 1 === result.genres.length ? g.name : `${g.name}, `\r\n                )}\r\n              </DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.number_of_episodes ? (\r\n            <>\r\n              <DataName>Seasons / Episodes</DataName>\r\n              <DataValue>\r\n                {result.number_of_seasons} / {result.number_of_episodes}\r\n              </DataValue>\r\n            </>\r\n          ) : null}\r\n          {result.imdb_id ? (\r\n            <Link\r\n              text={'IMDB Page'}\r\n              icon={'imdb'}\r\n              onPress={() => openBrowser(`https://www.imdb.com/title/${result.imdb_id}`)}\r\n            />\r\n          ) : null}\r\n          {result.videos.results?.length > 0 ? (\r\n            <>\r\n              <DataName>Videos</DataName>\r\n              {result.videos.results.map((video) => {\r\n                return (\r\n                  <Link\r\n                    text={video.name}\r\n                    key={video.id}\r\n                    icon=\"youtube-play\"\r\n                    onPress={() =>\r\n                      openBrowser(`https://www.youtube.com/watch?v=${video.key}`)\r\n                    }\r\n                  />\r\n                );\r\n              })}\r\n            </>\r\n          ) : null}\r\n        </Data>\r\n      </>\r\n    </ScrollContainer>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useLayoutEffect } from 'react';\r\nimport * as WebBrowser from 'expo-web-browser';\r\nimport { movieApi, tvApi } from '../../apis/api';\r\nimport DetailPresenter from './DetailPresenter';\r\n\r\nexport default ({\r\n  navigation,\r\n  route: {\r\n    params: { isTv, id, title, backgroundImage, poster, votes, overview }\r\n  }\r\n}) => {\r\n  const [detail, setDetail] = useState({\r\n    loading: true,\r\n    result: {\r\n      title,\r\n      backgroundImage,\r\n      poster,\r\n      overview,\r\n      votes,\r\n      videos: {\r\n        results: []\r\n      }\r\n    }\r\n  });\r\n  const getData = async () => {\r\n    const [getDetail, getDetailError] = isTv\r\n      ? await tvApi.show(id)\r\n      : await movieApi.movie(id);\r\n    setDetail({\r\n      loading: false,\r\n      result: {\r\n        ...getDetail,\r\n        title: getDetail.title || getDetail.name,\r\n        backgroundImage: getDetail.backdrop_path,\r\n        poster: getDetail.poster_path,\r\n        overview: getDetail.overview,\r\n        votes: getDetail.vote_average\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getData();\r\n  }, [id]);\r\n  useLayoutEffect(() => {\r\n    navigation.setOptions({ title });\r\n  });\r\n\r\n  const openBrowser = async (url: string) => {\r\n    await WebBrowser.openBrowserAsync(url);\r\n  };\r\n\r\n  return <DetailPresenter openBrowser={openBrowser} {...detail} />;\r\n};\r\n","import React from 'react';\r\nimport { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { Animated, PanResponder } from 'react-native';\r\nimport { Dimensions } from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport { apiImage } from '../../apis/api';\r\n\r\nconst { width: WIDTH, height: HEIGHT } = Dimensions.get('window');\r\n\r\nconst Container = styled.View`\r\n  padding-top: 60px;\r\n  flex: 1;\r\n  background-color: black;\r\n  align-items: center;\r\n`;\r\nconst Card = styled(Animated.View)`\r\n  top: 80px;\r\n  height: ${HEIGHT / 1.5}px;\r\n  width: 90%;\r\n  position: absolute;\r\n`;\r\nconst Poster = styled.Image`\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport default ({ results }) => {\r\n  const [topIndex, setTopIndex] = useState(0);\r\n  const nextCard = () => {\r\n    setTopIndex((currentValue) => currentValue + 1);\r\n  };\r\n  const position = useRef(new Animated.ValueXY()).current;\r\n  const panResponder = PanResponder.create({\r\n    onStartShouldSetPanResponder: () => true,\r\n    onPanResponderMove: (evt, { dx, dy }) => {\r\n      position.setValue({ x: dx, y: dy });\r\n    },\r\n    onPanResponderRelease: (evt, { dx, dy }) => {\r\n      if (dx >= 250) {\r\n        Animated.spring(position, {\r\n          toValue: {\r\n            x: WIDTH + 100,\r\n            y: dy\r\n          },\r\n          useNativeDriver: true\r\n        }).start(nextCard);\r\n      } else if (dx <= -250) {\r\n        Animated.spring(position, {\r\n          toValue: {\r\n            x: -WIDTH - 100,\r\n            y: dy\r\n          },\r\n          useNativeDriver: true\r\n        }).start(nextCard);\r\n      } else {\r\n        Animated.spring(position, {\r\n          toValue: {\r\n            x: 0,\r\n            y: 0\r\n          },\r\n          useNativeDriver: true,\r\n          bounciness: 20\r\n        }).start();\r\n      }\r\n    }\r\n  });\r\n  const rotationValues = position.x.interpolate({\r\n    inputRange: [-255, 0, 255],\r\n    outputRange: ['-8deg', '0deg', '8deg'],\r\n    extrapolate: 'clamp'\r\n  });\r\n  const secondCardOpacity = position.x.interpolate({\r\n    inputRange: [-255, 0, 255],\r\n    outputRange: [1, 0.2, 0.9],\r\n    extrapolate: 'clamp'\r\n  });\r\n  const secondCardScale = position.x.interpolate({\r\n    inputRange: [-255, 0, 255],\r\n    outputRange: [1, 0.8, 1],\r\n    extrapolate: 'clamp'\r\n  });\r\n  return (\r\n    <Container>\r\n      {results.map((result, index) => {\r\n        if (index < topIndex) {\r\n          return null;\r\n        } else if (index === topIndex) {\r\n          return (\r\n            <Card\r\n              style={{\r\n                zIndex: 1,\r\n                transform: [\r\n                  { rotate: rotationValues },\r\n                  ...position.getTranslateTransform()\r\n                ]\r\n              }}\r\n              key={result.id}\r\n              {...panResponder.panHandlers}\r\n            >\r\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\r\n            </Card>\r\n          );\r\n        } else if (index === topIndex + 1) {\r\n          return (\r\n            <Card\r\n              style={{\r\n                zIndex: -index,\r\n                opacity: secondCardOpacity,\r\n                transform: [{ scale: secondCardScale }]\r\n              }}\r\n              key={result.id}\r\n              {...panResponder.panHandlers}\r\n            >\r\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\r\n            </Card>\r\n          );\r\n        } else {\r\n          return (\r\n            <Card\r\n              style={{ zIndex: -index, opacity: 0 }}\r\n              key={result.id}\r\n              {...panResponder.panHandlers}\r\n            >\r\n              <Poster source={{ uri: apiImage(result.poster_path) }} />\r\n            </Card>\r\n          );\r\n        }\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { movieApi } from '../../apis/api';\r\nimport FavPresenter from './FavPresenter';\r\n\r\nconst FavsContainer = () => {\r\n  const [movies, setMovies] = useState({\r\n    results: [],\r\n    error: null\r\n  });\r\n  const getData = async () => {\r\n    const [results, error] = await movieApi.discover();\r\n    setMovies({\r\n      results,\r\n      error\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  return <FavPresenter {...movies} />;\r\n};\r\n\r\nexport default FavsContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\n\r\ntype InputProps = {\r\n  placeholder: string;\r\n  value: string;\r\n  onChange: (text: string) => void;\r\n  onSubmit: () => void;\r\n};\r\n\r\nconst TextInput = styled.TextInput`\r\n  background-color: white;\r\n  margin: 0px 30px;\r\n  padding: 10px 20px;\r\n  border-radius: 15px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport default ({ placeholder, value, onChange, onSubmit }: InputProps) => {\r\n  return (\r\n    <TextInput\r\n      value={value}\r\n      onChangeText={onChange}\r\n      onSubmitEditing={onSubmit}\r\n      placeholder={placeholder}\r\n      returnKeyType={'search'}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components/native';\r\nimport Horizontal from '../../components/Horizontal';\r\nimport HorizontalSlider from '../../components/HorizontalSlider';\r\nimport ScrollContainer from '../../components/ScrollContainer';\r\nimport Input from '../../components/Search/Input';\r\nimport Vertical from '../../components/Vertical';\r\n\r\ntype movieProps = {\r\n  id: number;\r\n  vote_average: number;\r\n  poster_path: string;\r\n  title: string;\r\n  name: string;\r\n};\r\n\r\ntype SearchPresenterProps = {\r\n  movies: movieProps[];\r\n  shows: movieProps[];\r\n  keyword: string;\r\n  onChange: (text: string) => void;\r\n  onSubmit: () => void;\r\n};\r\n\r\nconst Container = styled.ScrollView`\r\n  background-color: black;\r\n`;\r\n\r\nexport default ({ movies, shows, keyword, onChange, onSubmit }: SearchPresenterProps) => {\r\n  return (\r\n    <ScrollContainer\r\n      refreshFn={onSubmit}\r\n      loading={false}\r\n      contentContainerStyle={{ paddingTop: 10 }}\r\n    >\r\n      <Input\r\n        placeholder={'Wirte a keyword'}\r\n        value={keyword}\r\n        onChange={onChange}\r\n        onSubmit={onSubmit}\r\n      />\r\n      {movies.length !== 0 && (\r\n        <HorizontalSlider title={'Movie results'}>\r\n          {movies.map((movie) => {\r\n            return (\r\n              <Vertical\r\n                isTv={false}\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.title}\r\n                poster={movie.poster_path}\r\n                votes={movie.vote_average}\r\n              />\r\n            );\r\n          })}\r\n        </HorizontalSlider>\r\n      )}\r\n      {shows.length !== 0 && (\r\n        <HorizontalSlider title={'Tv results'}>\r\n          {shows.map((show) => {\r\n            return (\r\n              <Vertical\r\n                isTv={true}\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.name}\r\n                poster={show.poster_path}\r\n                votes={show.vote_average}\r\n              />\r\n            );\r\n          })}\r\n        </HorizontalSlider>\r\n      )}\r\n    </ScrollContainer>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { movieApi, tvApi } from '../../apis/api';\r\nimport SearchPresenter from './SearchPresenter';\r\n\r\nexport default () => {\r\n  const [keyword, setKeyword] = useState('');\r\n  const [results, setResults] = useState({\r\n    movies: [],\r\n    shows: [],\r\n    movieError: null,\r\n    showsError: null\r\n  });\r\n  const onChange = (text: string) => {\r\n    setKeyword(text);\r\n  };\r\n  const search = async () => {\r\n    if (keyword === '') {\r\n      return;\r\n    }\r\n    const [movies, movieError] = await movieApi.search(keyword);\r\n    const [shows, showsError] = await tvApi.search(keyword);\r\n    setResults({\r\n      movies,\r\n      shows,\r\n      movieError,\r\n      showsError\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SearchPresenter\r\n      {...results}\r\n      onChange={onChange}\r\n      onSubmit={search}\r\n      keyword={keyword}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport styled from 'styled-components/native';\r\nimport Horizontal from '../../components/Horizontal';\r\nimport HorizontalSlider from '../../components/HorizontalSlider';\r\nimport List from '../../components/List';\r\nimport ScrollContainer from '../../components/ScrollContainer';\r\nimport Vertical from '../../components/Vertical';\r\n\r\ntype showProps = {\r\n  id: number;\r\n  poster_path: string;\r\n  name: string;\r\n  vote_average: number;\r\n  overview: string;\r\n};\r\n\r\ntype TvPresenterProps = {\r\n  loading: boolean;\r\n  popular: showProps[];\r\n  topRated: showProps[];\r\n  today: showProps[];\r\n  refreshFn: () => void;\r\n};\r\n\r\nconst Container = styled.View`\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport default ({ refreshFn, loading, popular, topRated, today }: TvPresenterProps) => {\r\n  return (\r\n    <ScrollContainer\r\n      refreshFn={refreshFn}\r\n      loading={loading}\r\n      contentContainerStyle={{ paddingTop: 10 }}\r\n    >\r\n      <Container>\r\n        <HorizontalSlider title=\"Popular Shows\">\r\n          {popular.map((show) => {\r\n            return (\r\n              <Vertical\r\n                isTv={true}\r\n                id={show.id}\r\n                key={show.id}\r\n                poster={show.poster_path}\r\n                title={show.name}\r\n                votes={show.vote_average}\r\n              />\r\n            );\r\n          })}\r\n        </HorizontalSlider>\r\n        <HorizontalSlider title=\"Top Rated TV Shows\">\r\n          {topRated.map((show) => {\r\n            return (\r\n              <Vertical\r\n                isTv={true}\r\n                id={show.id}\r\n                key={show.id}\r\n                poster={show.poster_path}\r\n                title={show.name}\r\n                votes={show.vote_average}\r\n              />\r\n            );\r\n          })}\r\n        </HorizontalSlider>\r\n        <List title=\"Airing Today\">\r\n          {today.map((show) => {\r\n            return (\r\n              <Horizontal\r\n                isTv={true}\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.name}\r\n                poster={show.poster_path}\r\n                overview={show.overview}\r\n              />\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n    </ScrollContainer>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { View, Text, Button } from 'react-native';\r\nimport { tvApi } from '../../apis/api';\r\nimport TvPresenter from './TvPresenter';\r\n\r\nexport default () => {\r\n  const [shows, setShows] = useState({\r\n    loading: true,\r\n    today: [],\r\n    thisWeek: [],\r\n    topRated: [],\r\n    popular: [],\r\n    todayError: null,\r\n    thisWeekError: null,\r\n    topRatedError: null,\r\n    popularError: null\r\n  });\r\n  const getData = async () => {\r\n    const [today, todayError] = await tvApi.today();\r\n    const [topRated, topRatedError] = await tvApi.topRated();\r\n    const [popular, popularError] = await tvApi.popular();\r\n    const [thisWeek, thisWeekError] = await tvApi.thisWeek();\r\n    setShows({\r\n      loading: false,\r\n      today,\r\n      thisWeek,\r\n      topRated,\r\n      popular,\r\n      todayError,\r\n      thisWeekError,\r\n      topRatedError,\r\n      popularError\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  return <TvPresenter refreshFn={getData} {...shows} />;\r\n};\r\n","import React, { useLayoutEffect } from 'react';\r\nimport { getFocusedRouteNameFromRoute, Route, RouteProp } from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport { Favs, Movies, Search, Tv } from '../screens';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { StackNavigatorParams } from './Stack';\r\nimport { Platform } from 'react-native';\r\n\r\ntype TabsProps = {\r\n  navigation: StackNavigationProp<StackNavigatorParams, 'Tabs'>;\r\n  route: RouteProp<StackNavigatorParams, 'Tabs'>;\r\n};\r\n\r\nconst Tabs = createBottomTabNavigator();\r\n\r\nconst getHeaderName = (route: Partial<Route<string, object | undefined>>) =>\r\n  getFocusedRouteNameFromRoute(route) || 'Movies';\r\n\r\nexport default ({ navigation, route }: TabsProps) => {\r\n  useLayoutEffect(() => {\r\n    const name = getHeaderName(route);\r\n    navigation.setOptions({\r\n      title: name || 'Movies'\r\n    });\r\n  }, [route]);\r\n\r\n  return (\r\n    <Tabs.Navigator\r\n      screenOptions={({ route }) => ({\r\n        headerShown: false,\r\n        tabBarStyle: { backgroundColor: 'black', borderTopColor: 'black' },\r\n        tabBarShowLabel: false,\r\n        tabBarIcon: ({ focused }) => {\r\n          let iconName = Platform.OS === 'ios' ? 'ios-' : 'md-';\r\n          if (route.name === 'Movies') {\r\n            iconName += 'film';\r\n          } else if (route.name === 'Tv') {\r\n            iconName += 'tv';\r\n          } else if (route.name === 'Search') {\r\n            iconName += 'search';\r\n          } else {\r\n            iconName += 'heart';\r\n          }\r\n\r\n          return (\r\n            <Ionicons\r\n              name={iconName as React.ComponentProps<typeof Ionicons>['name']}\r\n              color={focused ? 'white' : 'grey'}\r\n              size={26}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    >\r\n      <Tabs.Screen name=\"Movies\" component={Movies} />\r\n      <Tabs.Screen name=\"Tv\" component={Tv} />\r\n      <Tabs.Screen name=\"Search\" component={Search} />\r\n      <Tabs.Screen name=\"Discovery\" component={Favs} />\r\n    </Tabs.Navigator>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Detail, Movies } from '../screens';\r\nimport Tabs from './Tabs';\r\n\r\nexport type StackNavigatorParams = {\r\n  Tabs: undefined;\r\n  Movies: undefined;\r\n  Detail: undefined;\r\n};\r\n\r\nconst Stack = createStackNavigator<StackNavigatorParams>();\r\n\r\nexport default () => (\r\n  <Stack.Navigator\r\n    screenOptions={{\r\n      presentation: 'modal',\r\n      headerStyle: {\r\n        backgroundColor: 'black',\r\n        borderBottomColor: 'black',\r\n        shadowColor: 'black'\r\n      },\r\n      headerTintColor: 'white',\r\n      headerBackTitleVisible: false\r\n    }}\r\n  >\r\n    <Stack.Screen name=\"Tabs\" component={Tabs} />\r\n    <Stack.Screen name=\"Detail\" component={Detail} />\r\n  </Stack.Navigator>\r\n);\r\n","import React, { useState } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { Image, StatusBar } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport { Ionicons, FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport { NavigationContainer } from '@react-navigation/native';\nimport 'react-native-gesture-handler';\nimport Stack from '@navigation/Stack';\n\nconst cacheImages = (images: any) =>\n  images.map((image: any) => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n\nconst cacheFonts = (fonts: any) => fonts.map((font: any) => Font.loadAsync(font));\n\nexport default function App() {\n  const [isReady, setIsReady] = useState<boolean>(false);\n  const loadAssets = (): Promise<any> => {\n    const images = cacheImages([\n      'https://images.unsplash.com/photo-1571847140471-1d7766e825ea?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=673&q=80',\n      require('./assets/splash.png')\n    ]);\n    const fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\n    return Promise.all([...images, ...fonts]);\n  };\n  const onFinish = () => {\n    setIsReady(true);\n  };\n  return isReady ? (\n    <>\n      <NavigationContainer>\n        <Stack />\n      </NavigationContainer>\n      <StatusBar barStyle=\"light-content\" />\n    </>\n  ) : (\n    <AppLoading startAsync={loadAssets} onFinish={onFinish} onError={console.error} />\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/splash.63d56b17.png\";"],"sourceRoot":""}